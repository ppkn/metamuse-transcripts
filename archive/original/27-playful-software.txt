Speaker 1 (00:00:00):
Well, I think happened was that you got people who knew how to bend and to mold computers and software in the same place as people who were very efficient and effective and curious and playful around things like the sign and getting things done and had real needs, right. That's sort of, that's some biases there, I think is what drove Makola as to become such a successful platform. Hello and welcome to Metta muse use as a tool for thought on iPad. This podcast, isn't about music product. It's about music company and the small team behind it. I'm Adam Wiggins here with mark McClenaghan Adam and joined today by Rasmus Anderson. Hello? Hello and Rasmus. I understand you're an amateur gardener. Yeah, that wouldn't be very far from a lie. I do have a little Frontyard, tiny, tiny one, a tiny backyard, and it is a constant fight with nature, but you know, it's kind of fun and I always find it funny weeds are not particularly a thing that there's no like clear definition other than just a plant that you don't want to be growing there. 

Speaker 1 (00:01:17):
So one man's weed is another person's desired plants. Is that about right? I think that's right. Yeah. I mean, I grew up in Sweden. Um, I remember my parents playing this like really smart game on me and my brother where we would have these they're called mosquito. So, which are kind of pretty, but they're definitely weed. There's these beautiful kind of yellow flowers and they can break through asphalt there. You're like really strong growers, you know, and as a kid, you know, parents would be like, Hey, let's do like an adventure thing. Like you find all these in the yard. And like for each stuff, then we line them up and count them. And we would just like, wow, this is cool. And we would go and pick them and lighten them up. And our parents will be like, you know, behind the corner though, it'd be like, wait, the only food. 

Speaker 1 (00:02:02):
So yeah, they'll a weeding as a kid without really knowing that I was doing that nice fun. We lived on a farm for, just for a little while, while my dad was stationed at a Naval station, that was kind of in the boonies you might say. And my mom was a pretty serious gardener growing her own vegetables and fruits. And we had fruit trees and stuff like that. But I certainly remember that some things that tomato plants grew fast and easy. There was a watermelon plants that we got one summer would me and my brother would just a watermelon and spit the seeds into a nearby garden bed. And then there were some others that were endless frustration for trying to coax out of the ground. So yeah, I think my strategy, if I'm ever in the position of being a yard owner will be to just identify all of the heartiest plants that grow, even if you don't want them to. 

Speaker 1 (00:02:48):
And just say, these are what I'm specifically cultivating. I like the strategy. This is someone once said this. I'm sure that they're like children books and stuff written around this. I'm not sure, but someone said this and I thought it was kind of interesting that there's a gardening approach to like steering a system. Right. And there's sort of like more of the plan in the sign approach to steering the system, meaning that if you have this sort of like organic type of system, like a garden, right. Or maybe software, it's going to just keep changing. And the gardener, his approach is that by doing something like Adam, what you were saying, you kind of identify the things that you want to cultivate and you give them a better opportunities. And then you look at things like weed or things that you want to move, and you sort of like give them worse opportunities, right. 

Speaker 1 (00:03:36):
He sort of steered a system like that to see where it goes. Whereas the, I don't know if there's a better word for it, but the planning and the signing the system from scratch, you're like constantly trying to hope that it evolves in the direction you want to, which is I think never really the case. Right? Yeah. I think that as I use gardening as a metaphor often for those kinds of organic growth things, for something like a community where you just can't directly direct, what's going to happen. What you can do is encourage and nurture and create opportunities. As you said, for the kinds of things you want to see and discourage kinds of things you don't want to see, but that's part of the joy maybe is you don't know exactly how it's going to turn out. If you come at it from a kind of a builder engineer architect perspective that I'm going to plan down to every last little detail in the blueprint, and then I'll make reality match that. 

Speaker 1 (00:04:29):
Exactly. You're likely to be frustrated and disappointed. Yeah, that's right. I think this, somehow we just kind of slipped them to this and that's interesting in itself, but this is kind of what I'm trying to do with my project play, but see, we can get into it a little bit more in detail in a few minutes, but I think that there's this opportunity to encourage sort of like a different way of building software, not like radically different, but sort of like somewhere in between big scale and tiny, tiny scale of software, kind of like personal software. But anyhow, I think that a cultural change, right, it's sort of like creating this garden where interesting like plants as of Ken grow to kind of spin off this metaphor is a really interesting idea. And it's sort of like the core of play, but that is the idea around it. 

Speaker 1 (00:05:19):
That's what I'm trying to do with it rather than to build any specific type of technology. Now, software is like part of, you know, my strategy to make the change happen, or at least I hope I can, but the goal of play, but this is sort of like cultural change or really like offering, you know, a different or a slightly different at least culture does offer building culture is so important, certainly for programming communities, but more broadly just creation of any end artifact comes not just from the tools and the materials and the intentions of the creators, but also this ineffable thing we call culture. Yeah. I'm really excited to hear more about playbill, which is a brand new project you're working on just for the listeners sake. Be great to briefly touch on your backgrounds. You've got a very impressive resume fresh off of working at Figma for that Dropbox. 

Speaker 1 (00:06:10):
You were early at Spotify. And just looking down that list, you know, I find myself thinking, well, if you were an investor, that would be pretty impressive. And I would assume you're just sort of leaving the things out that were misses, but as someone that goes to work for companies, you don't have the ability to do such a portfolio strategy. I'm wondering if you feel like you have a particular knack for spotting high potential companies early on, or is it more a spot of luck or some combination? That's a good question. I think it's probably the latter. It's a little bit of a combination really. It's this kind of idea of intuition, right? You have a lot of experience. I do have quite a lot of experience at this point. And I think that as put up these neurons in such a way that I have some sounds of least, at least within this particular kind of industry that I'm in, someone was asking me this standard. 

Speaker 1 (00:06:58):
They actually have this little Twitter, like texting back and forth. But I think that there's a couple of things you can do that don't require experience to build up intuition. And one thing is just to like, really understand what you like to do, right? And so this is not specifically around, you know, successful technology companies, but I think it's like a foundational sort of like a cornerstone to being successful with like really anything is to understand like what you really want right now, what your parents told you that you should want or not what like your peers tell you that you should want, but what you really want. I know that's really hard and maybe that's the hardest thing in life actually to know what you really want. I'll echo that as well, which is for me, I had this experience of growing up with video games and not being my passion. 

Speaker 1 (00:07:44):
And I was just convinced I would go into the game industry and that was my path. And I actually did that. And then I was miserable. I didn't like it. And I, what on paper you might say, or hypothetically, I thought I wanted to do in practice, didn't actually work for me. And then when I had an opportunity to join a company, making basically from my perspective, pretty boring business software, I jumped into that and discovered I loved it. And I was much better at a thing that I loved to do or fit with my natural passion somehow. So I think it's also a, maybe coming back to our gardening metaphor, a bit of a discovery and looking for opportunities and noticing what's growing what's sprouting really naturally. And then encouraging that rather than having some preconceived notion of what you think you should do, which might come from parents, certainly could come from, you know, the tech industry, which lionize a certain kinds of companies or certain kinds of people. 

Speaker 1 (00:08:35):
And instead kind of paying attention to your own internal compass for this is a thing that I could really see myself spending every minute thinking about for the next five years, 10 years or career. That's so interesting to hear you say that, but you had that experience, which I think a lot of us have, right. If we had this idea, maybe we want to be a chef or an astronaut or, you know, a fire person or whatever, when we were kids. Right. And, and like, most of us ended up not doing that. Right. We ended up doing something else. And I think that happens a few times in life where like, you, you know, we see this thing, it's like very exciting. We perceive it. And then we stumbled upon something else. And that just, you know, we stumbled upon probably a hundred different things. 

Speaker 1 (00:09:16):
Right. But one of those things where like, whoa, this is really fun. And this is really interesting. Yeah. So getting back to your question a few minutes ago, I think that if you have that sort of like cornerstone idea of learning about myself is just something that I should all this work on. Then on top of that, I think we can do is to try to learn about the people that are working at various different companies, sort of like looking for passion in people like finding out why incentives are driving them to make a change and with a change. I mean like a technology startup right. Usually exists for one of two reasons. And the first reason is that people want to make a change or want to see a change in the world. Right. It can be a very small scale, a very big scale. 

Speaker 1 (00:10:02):
And the second thing, I think that often you have these alternative motives, you have power fortune, you know, impressing other people, like all those things, there's nothing bad about those things. Right. But they are usually then hidden away. There's this facade of like, no, we're really trying to make a machine share with us. You do for cats or whatever. And really like someone who has wanted to like build a really cool thing so they can sell it and get dredged. Right. And again, there's no judgment here, if that's your thing, that's cool, but that's not what I'm interested in. So that's one of the things that I tried to see and figure out and really spend time on understanding when speaking with a company or a few people who want to make a change, right? Like, are they driven by passion for this change? Like, can they see this world? 

Speaker 1 (00:10:46):
And like, you know, in three years, if we have this thing and people are using it, like, this is how their lives are different. This is how they can like do things that they can't do before. Like that's the sort of thing to me is like kind of rare. It might be surprisingly rare, actually. We're just kind of weird. And to find that out, I think the easiest way is just to spend a little bit of time with a lot of different people. Soon if you're interviewing for a company, ask if you can spend a few hours with one or two people on the team, rather than can I spend half an hour with like 10 different people. So it sounds like you're, you know, come back to that investor kind of analogy I made before. We're going to work for a company you're investing your time rather than your money, which in many ways is a more scarce and valuable resource. 

Speaker 1 (00:11:34):
You think of it as less in terms of, let me evaluate, I don't know the market opportunity here, whether I think this has the potential to be something good or big or what have you. And instead more is kind of looking into the souls of the people who are working on it to understand their motivation and their drive and their passion. For sure. Yeah. This is probably a cliche at this point, but if you have a group of good people that you're working on, it's not that important once you're working on. Right. I think that's a very extreme way of looking at it. I think in reality, it's not as clear cut as that. It's not as true as that, but I do think that it does hold true to some extent, right. That if you flip it around, right. If you do some sort of, kind of Greek philosophy approach, you know, you say sort of like, what if everything is good, right? 

Speaker 1 (00:12:21):
So you start out in like ideal scenario. So it's, every person is amazing on the team. The business is doing great. The mission is something that is so close to my heart. Like I'm just thinking about a day and night. Right. And so on. And now you started like taking things away, right? Yeah. This kind of little thing in front of you, and now you start thinking that, okay, let's see if I take away the mission. Right. And I have all the other things still like, does this feel like something I want to do for four years? Right. Not in day. Right. It's like, I'll maybe, you know, you start taking things away. And I think if you start out in the ideal case, right. You play these different sermons out and you take away that group of people. Right. So you replace that with like people who you would consider, like not being good, right? 

Speaker 1 (00:13:09):
Like maybe they had a bad influence on you maybe to create a lot of stress for you. Maybe they are just not good at their craft as so on whatever that means to you. I think for most people, like it stops pretty early in terms of like, yeah, I would still do this. Like you would be like, well, you know, with making such a big change and I'm really involved emotionally in this mission and everything. But like the people I work with are a pain it's like, I don't want to do that. Right. Life is so tiny, so short. And you look back in the past and the things you remember, it's not the bugs you squashed and cold, or like the pixels he made, it's going to be the people. And like the shame that the company is trying to make and a group of people are trying to make. 

Speaker 1 (00:13:47):
I think it is very important, right. And this is where it really loops back to the first thing that I was talking about a few minutes ago about like learning about yourself and knowing yourself. I have a few friends who are very concerned about the environment of earth and stuff like that. And she was to leave their traditional tech jobs to go work for, you know, uh, renewable energy companies and stuff like that. And for them, you know, the mission is very important, right. And the people are very important. So I think you want to really like look at all of these different things, like a group of people who are amazing, who are very unsuccessful of doing what they do is not going to be a fun experience anyways. Right. So yeah. I don't think there's a magic bullet. There's no sort of golden arrow or whatever metaphor here, but I think one really good thing to do is look for, is a sort of like passionate people and what drives them to make that change. 

Speaker 1 (00:14:40):
Yeah. I'm a fan of that seeking opportunities in my own career. And when I'm in the position of giving career advice to others, I usually say something like optimize for the people, find the team that you have that collaboration magic with. And that will be just far greater return than the exact perfect mission. Um, I do think, you know, those things related probably because if you share values and share passions around a particular mission, that's likely to be a team that you work really well with. But yeah, given the choice between a thing that's slightly off from what I might actually be my ideal, the perfect team and the other way around, I always go for the team. I'm curious to hear Adam and mark, how you're looking at this as well. You're both experienced in the software industry, a Siam like kind of flipping the question back to you. 

Speaker 1 (00:15:27):
What are some of the things you might do or look for in order to understand if this, you know, company group of people are going to be successful? Well, this is going to be like a fun ride for me. So to speak. I'd love to hear from mark on that since he's actually, now that I think of it, pick some pretty good ones, including for music was at Stripe. And so, yeah, I guess I never asked, did you see that as oh, these guys are going to be huge. I really want to be on board early. My stock will be worth a lot. Or was it more, this is an interesting domain and I want to work with these people who knows the company will be successful or that wasn't part of your calculation. Yeah. It's tough for me to give an answer to that because to my mind, there's a lot of, you know, it, when you see it and to your point about having experience and neurons and pattern matching, I feel like I've been lucky enough to work in industry for a while. 

Speaker 1 (00:16:12):
So now I'm able to have perhaps some judgment of that. I do think as a tactical matter, if people actually want to have a better chance of working at a high potential company, in the classic sense, you can get a lot of information by asking people whose job it is to know these things. So investors and hiring managers will often have a lot of data about companies that will do well. And then it kind of becomes like investors will always say, oh, it's actually not hard to pick the company. That's hard to get into deals. I think there's a similar dynamic with joining companies where often a big part of it is actually getting hired. But yeah, I think as a tactical matter, if you do ask around, you can get a lot of good data points, but I also have similar sentiment in terms of at a more personal level, what I look for in a company. 

Speaker 1 (00:16:49):
And I would also say it's about the people and the mission. And I always go back to this idea of, you know, we don't have a whole lot of mortal life and it would be a shame to spend the next two to four years of it working with people he didn't care for. And when you say it like that, oh wow. You know, it really should, uh, make sure that you, people that you trust and look up to and want to become more like, because as you spend one to four years with this team, you are going to basically become more like them. So is that something that you would be proud and excited to do or that you would be afraid and ashamed of? There's a great patio, 11 quote. I think it's even in an article writing about the culture at Stripe. And he says, when you're choosing your colleagues, these are people you're essentially giving right access in your consciousness to, we don't realize it, but just the people you're around all the time, you become like them, whether you like it or not. 

Speaker 1 (00:17:35):
So surround yourself with people you admire and you want to become more like, and that will come true. Absolutely. I really liked that. It's also my connect a little bit to our topic of playful software, because my mind one aspect of playfulness is sort of undertaking the process and the work for its own sake, without a lot of accountability to the end result and just kind of enjoying the process, you know, doing it for the beams, if you will. And I feel like it can only do that well if you actually really love what you're working on and the discipline, but I'm curious to hear Rasmus while your perspective on playful softwares. Well, I think for most people plays full software. The first that comes to mind is probably games, right? And games, there is sort of like almost the purest type of playful software that is their primary and often only goal, right? 

Speaker 1 (00:18:25):
TSB, playful, Ts entertain. And so I think playful software that is not games have some amount of that sort of like entertainment that, you know, a previous guest of yours Jason was saying sort of like fidget the ability, you know, the idea that there's some quality to the software that makes you want to just like kind of toy around and play around with the software itself, not to produce something necessarily, although that might be the main reason for the software to exist. So I think if they're looking for the definition of playful software is probably something in the realms of game, like entertainment, like qualities that are kind of intertwined with some sort of utility. This is really interesting. This nexus of entertainment versus playfulness versus utility, because I feel like actually there's some relations certainly between entertainment and playfulness, but I feel like they're also somewhat separable. 

Speaker 1 (00:19:20):
Like you can have a game where it's sort of a mindless game, are you just playing to get really good at it? Like a competitive game? And the flip side, you can have playfulness that is more just about exploring and seeing what you can do and what you can make. And perhaps the stuff in the middle like Minecraft is kind of in the middle of there. It's both entertaining and it's playful. And I do think people tend to go towards games, but I think there's another important element around what we're calling playfulness. That's really important. Yeah. That's a good point. I'm suddenly reminded of a book by one of my favorite authors, Virginia Postrel and in there as a chapter where it asks the question of what actually is the difference between work and play. And it's one of those things where you go, oh, well, it's obvious. 

Speaker 1 (00:19:58):
And then when you try to come up with a definition, like, well, you getting paid to work and you don't get paid to play. And really quickly, especially if you're someone that's, you know, in the tech industry, a designer or developer, whatever you find yourself doing things that look very, very similar, maybe in your free time that you do at your work, but it's hard to pin down and live with the differences and she ends up defining it exactly. As you said there, mark, which is play is something that's open-ended, you don't have a specific goal in mind. You can start out with, I'm going to paint the painting of this sunset. And by the time you get to the end, you've decided instead to fold the canvas into an origami Swan, and you know, you could do that if you want, whereas work, you have this specific end goal that you'd get to often in a particular timeframe. 

Speaker 1 (00:20:45):
And even if you find some interesting along the way, you kind of have to ignore that because you have made this commitment to deliver some specific result. And I'd say that as a designer, like playing is often a very important part of the understanding part of design, which I think is like a really big chunk of the sign work. Right? You know, you have this opportunity or this kind of problem, like there's something you're pursuing right. With your design product. And before you can make any decisions and any changes, right. In terms of like getting closer to solving it or shady, yet you have to understand it. Right. And so you take things apart, you put them back together, right? You learn about things. I should take things apart. You'll find new parts that you didn't see before. Right. You'll find new constraints that a project you're like, oh shoot, oh, I guess this material is different. 

Speaker 1 (00:21:35):
Right. And so I think, as you were saying, if you take a step back and you think about like, well, this kind of looks like play, doesn't it. And I think in many ways it is straight up play, but it is sort of a semi open-ended closed-ended play, right. Is sort of like play for the purpose of learning. And I think this is where most of us in the tech industry, like can relate to playfulness in like the way we use software. So maybe on a weekend, you're like, Ooh, I've heard about this new like Russ thing. Maybe I should like take the respite. Right. And he put together a little, whole world thing and you find a rust compiler and you write some code and you're like, oh, what is, why can I borrow this thing? Y whatever. And the goal here, right. Is play. 

Speaker 1 (00:22:18):
You might not call it play, but unless your goal is to actually like, get an output in the end or make a change or something that really what you're doing right. Is learning. And I think that is often the reward. So to speak to outcome, the product of play is to learn something. Absolutely. I think that's a great point. And just to reiterate, I think it's really important to have this play access be separate from work versus entertainment. So that is you can play in a domain that we typically think of as work, whether that's design engineering, another example that I might throw in there is Elon Musk sending the Roadster to space. It's like, why are you doing that? I don't know. It'd be fun. I guess that's also in a very serious domain where he is in fact learning a lot by undertaking that activity also connects a bit to just our humanity, which is, of course, we're trying to achieve things, be productive in the broad sense of the word in our pursuits and our work life. 

Speaker 1 (00:23:13):
But at the same time, we're all people, we like stuff. That's fun. We like stuff that's playful. And if you can find ways to do that, that fit in with the work and fit in with accomplishing your ends. I think it makes it more fun and engaging and enjoyable for everyone who's involved. Yeah. There's something naturally even about play. For sure. We can imagine our, like ancestors running around naked in the woods with clubs, you know, kind of finding a pine cone or something on the ground or a stick and be like, oh, this kind of looks like a goat, you know, and you start playing with those things. And there's something I think is very interesting, like when I was a kid, so I grew up in the countryside and me, and, you know, the other like five neighbors or whatever, and the kids, we would, you know, go into the woods and that's how we would play. 

Speaker 1 (00:23:59):
We, you know, build a little like imaginary little airplanes that have a pine cone and stick through it and stuff like that. Right. And that's a kid, you see a stick and the stick is like, anything. It can be anything you want, it can be an airplane, it can be a rocket. Right. It can be a person. Right. And as an adult, we lose that. And I don't know why, but I see a stick today. And I'm like, oh, that's a stick. Right. And I'm like. You know, I want to see the stick. And I want to feel like, whoa, this could be a weird sort of creature, you know, from a different planet that has like multiple heads. That kind of looks like a stick, but it's not as thick. At some point, I listened to someone who was trying to make a point that the educational system, at least in sort of like most of the world takes in one end of a machine. 

Speaker 1 (00:24:45):
Right. Imagine people walking into one end of the machine and they come out in the other end. And like in the end, you walk in, there's all these color and difference and you know, different voices and stuff. And the other end is like this marching uniform people, right. School come and prints this pattern to us, right. This is real. That is not real. This is play that is not played. This is serious. Right. And I'm not sure that's like good for us, especially not for people in sort of the creative industry, which I think is like a growing industry is generally, yeah. I think that's a great point. Another way to articulate this might be as we get older and as we go through institutional education, we tend to get a new field that is kind of solidified, optimized, focused, structured, and play. In addition to a way to learn is a way to kind of foam roll your mind, you know, get some plasticity, break up some connective tissue so that you can think of some new stuff. 

Speaker 1 (00:25:40):
And so now that you make that point, I see that as a second key outcome, you know, you learn some stuff and you have some more flexibility in your head, but also first made the, that means that play and imagination have a strong relationship. And maybe this is, you said earlier, Rasmus that like, when you talk about in design plays very important, you might even say this isn't quite solved yet. Let me play with it and try some stuff. And that's connected to a little bit of an open-ended divergent thinking imagination out of the box, you know, looking at the stick and seeing the person or the rocket ship. And that actually is what could potentially lead you to the more practical breakthrough and doing your work. So true. So true. I think if you think about cool stuff that people have made, right? Like art or tools or anything, what have you that you think is like, wow, this is brilliant. 

Speaker 1 (00:26:29):
You know, this is so fun or this is really smart, whatever. And you start digging into like the history of that in pretty much every single case, you'll find that it's a remix of other things. Right. And so I think imagination and is sort of like, at least partially a practice of just exploring things, right. Is maybe that's a play part, right. Explore stuff. Do you see new things? Right. And then here comes the imagination part, which is like, oh, out of all these different things, there's like a new thing that can emerge, right? Like the iPod is a remix of this like Bron, handheld radio. Right. And then the iPhone is a remix of the iPod. You know, those things are very obviously remixes because they're, you know, visually very similar. But I think that there's also conceptual remixes and there's like straight up, like the word I'm using a remix, right? 

Speaker 1 (00:27:20):
Like from audio there's like, that is a very common practice. This is also reminding me that there's an important element of intellectual humility in play. So we've said perhaps play is when you don't have accountability for the end work product. But wait a second. We're in creative fields. Our entire purpose is to come up with novel ideas by definition. You don't know how to get to that work product yet, if you did you just go right there. So really it's taking away some of your constraints and preconceptions about what it takes to create a novel work product and exploring for a bit and saying, you know, press on the other side, there'll be clear that what you were calling play wasn't fact work or fed into work, but you don't know what that path is yet. So who are you to say, what is, or isn't going to have a good result. 

Speaker 1 (00:28:00):
Eventually that is really interesting. So mark, what level of constraints there, a level of sort of like boundaries, do you think you need to define in order for that to not be like this totally. Open-ended sort of quick detour of what I'm talking about. Yes. To make sure it does make sense. So like, I've seen this happening a couple of times in tech companies where you have a couple of interesting smart people who are playful and the company recognizes that and to recognize the value in innovation and stuff. Right. So they say, Hey, you know, Lisa and Robin, would you be interested in sitting in this corner? He is coming up with crazy. Right. Maybe we'll ship it. And I think in most cases that is like a failure, right. That will come up with all these incredible stuff, but there's never any sort of traction around it. 

Speaker 1 (00:28:43):
Maybe the constraints are way too vague, similarly to an art class. You know, if you ask someone to use paint, anything they want, there's this paralysis. Right. Of like, where do you even start? So within that framework, like looping back to my question to you, mark, what, and how do you think about like setting up the right amount of constraints to be able to play around within there? Yeah. That's a great question. And I don't think there's an easy answer, but one strategy that I like a lot is to follow the energy. So you're undertaking this project. Let's say we're going to relax the constraint about classically measured business output, but we're going to maintain the constraint around. There needs to be some energy here, which could be, you're able to get other people excited about it. You're able to get customers excited about it. 

Speaker 1 (00:29:22):
You're able to create something that's aesthetically interesting. That to me is an important source of energy. And so we're not going to kind of constantly inorganically add energy to the system. We're going to give you a little bit of spark and some additional fuel, but then you need to build it up from there and kind of find your own path, but you're free to not go directly to its end. Destination could be that you go through basically an art project or a recruiting project or a publication project. And then you go from there. And that's what helps a lot with kind of the mechanics of keeping the project going again, people are living their short moral lives and not going to want to work on something that doesn't have a lot of energy on it. So as you have more success, you tend to attract more people. 

Speaker 1 (00:29:58):
And that goes so energy. That makes a loss of kind of sense of urgency in different words. Yeah. Sort of like things are happening. Do you think that results or milestones, or even just celebrating like the screen moments of success or progress are important as well? So this is atomism back from the Heroku days to make it real. We can link to the full list of Adam isms, but it's this idea of even if it's just a prototype or even a CLI session mock up something that makes it real and makes it concrete for people really helps people understand what it is. And again, build that energy. I also, I mentioned it briefly, but I think this idea of aesthetics is really important. There are good threads to pull. When you have an idea that's aesthetically exciting or appealing. That's the way that I often draw energy on projects, even like programming type projects. 

Speaker 1 (00:30:45):
There's this thing I'm thinking about now, which is, and this is various different parts of the world, but I think the same thing is sort of the financial thing is true. Like, you look at a particular industry like hairdressers, right. Or pizza joints. And you look at like the typography, the color sensitively styling, they put on their storefronts. And there seems to be these sort of like pretty tight clusters of style. Right. And you're like, why are all the pizza joints in this town using hobo for the typeface? Right. It will be so much more interesting if like someone who's culpably Gothic, you know, or comic Sans or any of the other sort of, you know, funky type basis or something it'll stern like Helvetica. And I think what's going on is this recognition or just being to like, make it real, right. Imagine that we were starting a pizza joint. 

Speaker 1 (00:31:31):
Right. And we have ambition, right. We want this to be like the freaking best pizza in our town. Right. So, you know, we look at other pizza places and we have this intuition that we talked about before, right. Why does like a real pizza place? Right. And we have our heroes, right. And chances are that they use hobo. Right. We might not be aware of this as might be unconscious. And so we go to, you know, our local printing press who make a sign for us and they show us, you know, a bunch of different type faces. They have an option and we see the hobo one and we're like, oh, that just feels right. You know? So you go with that and you reinforce this idea, that real pizza place to use hobo for the typeface. And so I think this connects directly to what we were talking about with aesthetic being important and to make it real. 

Speaker 1 (00:32:17):
And I get Adam MIS, which I'm going to start saying now, by the way, so you're all kind of, wow, is that same thing, right? Let's say you're building like a necklace app and you have this idea for it. If you create created the sign, you see a picture that's like a fake screenshot that looks real. I think that there is a similar quality to that pizza. You want to, people are going to look at it and they're going to feel like, oh, this can be a real, you know, we can make this happen. That looks like a real thing. I didn't think of that. Right. So yeah, I think aesthetics and presentation and that mapping that to like your heroes or your ambitions, I think is super important for people to feel this is possible, you know, and to drive the energy you were talking about, mark, this reminds me of another quick story here of kind of aesthetic and emotionally driven play session. 

Speaker 1 (00:33:04):
A long time ago, I Heroku, we had an issue with the command line client being very slow and I was very frustrated with it and I wanted to have a faster client. So I undertook this playful project of just trying to make a very fast Herbert client that kind of only does hello world. Like it just lists your apps, but does it fast? And that ended up not really going anywhere, but by undertaking that project, I discovered go and then eventually Roco by example. And now we use go for our, some of our service stuff and that's a whole world that I never would have been introduced to. If I didn't, hadn't just kind of followed my nose up. It would be cool if even with relaxing the constraint that eventually needs to shift to production. Wait, are you behind go bike sample? Oh yeah. 

Speaker 1 (00:33:39):
No, I love that. Oh, that's funny. Oh, that's brilliant. Yeah. Oh, that's fantastic. Yeah. Yeah. We actually use this as a bit of, I think of it as the mark publishing style, which is static HTML, maybe a little bit of, I don't know, did you even have some kind of like template or build script for the basic site, but otherwise it's this very, almost uncalled brutalist, HTML, but a very effective design in the sense of it has the side by side code and description if I'm remembering correctly and yeah, it's this very kind of sleek. It loads fast because it's a static site probably still works fine now with zero maintenance. And we were certainly inspired by that, both for the switch articles and later all the muse stuff. And I'm just basically seeing the way that mark does kind of HTML publishing of these essentially kind of a mini book on the web was very influential for me and everything I've done. 

Speaker 1 (00:34:35):
Hmm. In an interesting way, I think go by example is playful, right? It seems to be very uniform. Right. And I think that uniformity creates this rather than create, I think it removes some anxiety around navigation. A lot of the web, I think, has this problem of creating anxiety around like the user interface, because everything is different, right? It's like you're jumping between different planets and yeah, I think what makes go by simple playful is that I'm guessing here and I'm extrapolating mostly from my own experience with using it. Like when you're in the mode of using it or visiting it, you are exploring, right. Otherwise you probably wouldn't be visiting me or you are different attainment. Right. Which is kind of playful too. That's what talks about. So I think that there's this category of things that they look and smell like periods. Bilities, they're very uniform. 

Speaker 1 (00:35:22):
They might seem boring, but there really are these like enablers or pieces of a puzzle for play from us. Yeah. And I also think that's often an origin story. So maybe we can use this as a way to learn more about your project where, you know, one lens on these projects is, you know, it's a way to learn a programming language. That doesn't sound very interesting. But the other lens is it's the result of a path that someone walked down around the change they wanted to see in the world. So likewise for your project play bit, you could describe it as someone's building a new operating system, another one of those. Right. But there's much more to it in terms of where you're coming from and why you're building this and how you're approaching it. So maybe can tell us a little bit about play that. 

Speaker 1 (00:35:59):
Yeah. So this like many things, there was no Eureka moments to central thing. I think you guys had talked about that on the show previously and the slow hunch, the slow hunch. Yeah, exactly. So this very much, this is what happened with play it. So for years and years, probably over 10 years, you know, I've been interested in operating systems and systems. And this is one of these things that I've learned about myself, that what I find really fun and exciting to work on in terms of software are things that enable a lot of people to make things with them. Right. So tools, in other words, I mean, you guys are there with me. And so I started thinking about a Mac was nine. It's still tight. You know, it's a nice windows, 2000 came around and I was like, wow, it's a snappy anyhow, fast forwarding a little bit. 

Speaker 1 (00:36:45):
Matt goes 10, I think is just like this wonderful, amazing operating system. And this very interesting point in time in 2001 or 2002 or so when that goes 10.1 or so it was the first kind of usable version of it started getting some traction. I think what happened was that this is probably mostly accidental, but you got these people who were really interested in kind of moldable malleable software, like poking things, hacking a face and they were using BSD Linux and stuff. Right. And they had to give up a good user experience and sure people have different opinions about this, but this is my opinion. I was a Linux on the desktop user for many years and many things I really loved about it, but I do not miss fighting with getting the wifi chip working or wake from sleep or editing. I spent so many hours of my life editing X org.com, trying to get the resolution to match the refresh rate of my monitor or whatever. 

Speaker 1 (00:37:40):
And that's the kind of pain you're willing to go through for this packable interface. And yet my experience was the same. I landed on MapQuest eventually because it gave me so much of that Unix underpinning. That's very kind of powerful and moldable, uh, with also good hardware integration. Yeah. I think that's right. That Lennox traditionally and still today, at least a Linux kernel is most distributions, right. Is configuration or overcome that show. Whereas mark, you were talking about go briefly and go as sort of like the opposite of that. And I'm a huge fan of go like the way it's the sign as a programming language too, but in particular, the way he went about the design, where it's convention over configuration. And we talk more about that later, but I think what happened was that one part right of people are really interested like you had, um, of the moldability of software and like the ability to fully customize your computing experience. 

Speaker 1 (00:38:31):
And then on the other hand, you have people who once used to use a computer and be efficient as a users of a computer. Right. And before Mike goes down, I think you had to make a choice. You had to say, I'm going to use windows or Mac was nine. I'm not going to be able to do this like multiple hackable stuff. I can do some basic programming and whatever, or I'm going to do that stuff, putting out a live list pain. Right. And that goes, 10 came around and was like, Hey, you know what? You can have both. Right. And so what I think happened was that you got people who knew how to bend and to mold computers and software in the same place as people who were very efficient and effective and curious and playful around things like the sign and getting things done and had real needs, right. 

Speaker 1 (00:39:16):
That's sort of, that's some biases there, I think is what drove Macalester to become such a successful platform in terms of application quality. Right? You just go and look at evidence of this, right? You go and look at a lot of web apps that are trying to mimic desktop apps. In most cases, you will find them using metaphor. So sometimes even aesthetics from echo, Stan is pretty rare that you find these things that are in the absence of a native hostess to mimic windows. Right. Anyhow. So that happened. I think that was a very interesting, it's clear to me now that that is a slowly dying thing, right? Matt goes 10, 15. You can't use the VMs thing unless you have a special signed certificate from apple that you can only get, if you were like, become a partner with them, right. You actually cannot run it. 

Speaker 1 (00:40:09):
Even as the owner of the computer, you cannot use it. Right? Sure. You can be roots. Right. You can pseudo and whatever, but you can't make any apps you use again. And that goes to 11. It takes that to the next step. Right. And that's fine. Anyhow. So in the context of all of these things, I think that there is going to be a need, right. In terms of like allowing people to keep being playful and exploring software at this sort of like more, I own a desktop computer, I want to be able to like do crazy when it, even if that means breaking it. Right. And so I started thinking a few years ago, I was saying to myself that I'm going to put a bet that in the next 10 years, there's not going to be a macro is dependent more on apple is just going to be about iOS. 

Speaker 1 (00:40:49):
And I think that's, I'm still believing that. And what then, right. Is there going to be sort of a Linux-based desktop thing that emerges is windows going to like finally started like a skunkworks team somewhere? They're just like, let's throw out like 95% of all that crap and build that. I don't know. So it was like, should I try to do something about this? It's really hard to build a business. I think around the idea of an operating system, especially replacing windows and macOS, which are just so good. Right. They're just so good. And asking someone to use replaced that with something is a big ask. Yeah, well maybe the way I would characterize it actually is less about good or not. And more just the amount of stuff that needs to go into what people would consider a modern operating system today ranging from hardware support to networking, to languages and various kinds of input devices and so on and API APIs and the ability to run software and browse the web and so on is just so huge that it is not something that an individual or even a startup can easily undertake. 

Speaker 1 (00:41:55):
Hence it's only within reach of these incumbents that have these large existing platforms and the rare case of maybe something like Google and chromo S being able to come in and throw quite a lot of resources and quite a lot of time at the problem. But I think even in the kids, a chromo, as you would end up in the same place, I think, right, you would have business and money driving the main incentives, right. Of like, well, if we make this work for everyone and anyone, we is make a ton of money, and then you have these competing incentives and more importantly competing sort of the constraints on those, right. You're going to need sandbox and you're going to need all of these safety features, right. You're not going to allow people to like mess around with the LS because then most people are not going to like, know what they're doing. 

Speaker 1 (00:42:39):
Right. And so I think the only way to go about those is to not trying to build an operating system or competing environment that fulfills all the expectations we have, but rather to just change our expectations or offer sort of like a imagine like a picture on the wall, right. Is a big picture is very complicated. And you're very familiar with this picture. And not that you're putting a smaller picture, a much simpler picture next to it on the wall. And you say, you know, you can walk around and you can look at this simple picture, still have this big picture. And I think like offering this idea of like, what if we shift our expectations a little bit, right. Maybe we do that just in mode of playful software. So we're playing what started out was as more of an ambitious idea of an actual operating system and ideas of, you know, kiddos have like a GPU and stuff like that on a remote computer and people can as timeshare. 

Speaker 1 (00:43:30):
It is because GPS, there's like kind of, I think a very important, slightly concerning environmental impact. And right now we've seen this with all the Foundry issues. Right. And, you know, TSM and stuff like that. Right. Like having issues, creating ships, right. Because rare earth limitations, and this is mostly, you know, impacted by COVID and stuff like that to my understanding. But still you buy like an Nvidia high-end GPU today, and it's very possible that a year from now, you got to have to replace the, with a new one. Right. Because that industry has moved so quickly. And how often are you going to use all that power? Right. Probably not all the time. Right. You're going to use that in Burt's a little here and there. So there's this crazy shirt on hardware, especially if you're in the PC world, right. The Macs tend to have a longer lifetime, I think. 

Speaker 1 (00:44:19):
And now I'm talking about like, high-end high-end hardware. So that was kind of where it started. And I got a lot of feedback from a lot of people who I was speaking with to try to understand, you know, and tried to navigate what this would mean. And if this was crazy, I think it was kind of like, it's probably a little too early. And I think the approach to making this kind of change needs to happen differently. And so through a pretty slow boil and slow process of us doing a lot of iteration, what is play bid sort of like he just came out of this. So very concretely, I think that playbook is probably more similar to a web browser or flash, technologically speaking. And, you know, jump in here if I'm taking this too far or if there's any curiosities to it. But I think the web is successful for a couple of different reasons, right. 

Speaker 1 (00:45:06):
But one of the reasons is this uniform programming environment does uniform runtime environment. And if I make this little like web program, right, and I tossed it over to you, you can use pretty much any iOS, any web browser. And I have a pretty good idea that the C is gonna run the same way for you. And this wasn't always true. I think in the last 10 years, this has kind of solidified to be like pretty much true. And I think that's really remarkable. Right. I'll add on to that, that, yeah, not only does it fulfill the write once run anywhere, that was a dream of lot of platform technologies, including flash and Java and so on, but it does it in a way that is sort of instantaneous download and run. And then by far the most important part of it, I think is the sandboxing. 

Speaker 1 (00:45:52):
It really gets that right. I can completely trust my program to download a program from a website. A website is a program now, very sophisticated ones potentially with all the JavaScript can do. And I can trust that. I can just point my browser to URL that I don't know who's on the other side of that. And it will download and run that because the sandboxing is essentially perfect within that tab. It can't go out and access rest of my computing device, as far as I know, no other computing environment has achieved that. Well, I'd say the flash did achieve that. And I think that flash was really brilliant in many different ways. The demise of flash, I think, has reasons that are really unrelated to its use experience. Like development experience is mostly, you know, kind of a monolith owned by a single corporation. Right. 

Speaker 1 (00:46:41):
But the model, yeah. I think about flash or think about the web things, kind of the same thing. That model is really interesting to me. And I think the one piece of the foundation for creating a culture where you feel empowered to play around with software and to make fun programs is some sort of safety. And I think that's what the sandbox does. The good part of a sandbox that you're talking about, how to him is I'm never writing perfect. Co-write, I'm going to do something and again, run it and maybe like delete all the things. Right. If I run it on sandbox, it's just going to lead all the things in the sandbox, not, you know, my passport from a Dropbox or something like that. So I think that's the good part of the sandbox. The bad part of course, is like, when you want to do something interesting, like, let's say you have a photo sensor or something clinic to do it USB, and you want to access you can't and you would be damaged. 

Speaker 1 (00:47:31):
And that's why you have the [inaudible]. If you're like a web developer, you have to USP a lot. I can't use web for death. Right. And then usually you're outside of a sandbox and there's no sandbox. And in the last couple of years there's been this kind of advancement with virtualization and virtualization sometimes is mixed up or messed up with like emulation or did have like a virtual machine. Right. So a virtual machine, I would think of as a superset of emulation and virtualization. So emulation, when you run a program, like let's say like a Nintendo emulator, right. You have this program that appears to have the original nest CPU and they'd have a coprocessor. I can't remember. And the SP and all these like actual hardware things. Right. So the program inside the load, it up thinks that is running on those hardware and stuff. 

Speaker 1 (00:48:19):
Right. Then, whereas virtualization is this idea of running the program in a way so that it's environment, not necessarily as hardware by its environment appears to be that of a unique computer. Right. And this is kind of how AWS and Google cloud and all these things do it. Right. And this has been around for quite a long time, probably about 20 years or so as a concept. And probably in the last 15 years has been increasingly like common to develop software, doing this Ducker is like a Poplar kind of virtualization environment. Right? And now you have these features built into Makola since 10 point 10. You haven't built into, in windows 10 with hyper V. You have the built in, in Linux with KVM. And there's similar things for a couple of other operating systems. Right. And this has happened in the last few years. 

Speaker 1 (00:49:13):
And so I was thinking that why not is make that the sandbox, right? So like, instead of making the sandbox be this, you know, there's a Dom, right. And you have a JavaScript API and you have a fetch function, you have an array type and so on, right. That's sort of like the uniform runtime environment. Then, you know, you run that in Firefox or Chrome or safari. That's the us going to call it completely different code. Right. Implemented totally different ways. Right. That's sort of like the uniformity, like what if that's just like Linux and Stan, you know? So like when you run a program, instead of running it as JavaScript or something like that, you just run it as whatever programming language you want. You know, mark can riding in, go and Adam, you can write a Ruby and it's like, totally fine. And you can, inter-operate part of the appeal. 

Speaker 1 (00:50:02):
There is something like flash, you have to use a very specific programming language and API APIs through for the web as well. JavaScript is not a language. A lot of people love. And yet, because you want to be on the web, you need to write things in JavaScript and using the web API APIs. And so it sounds like this virtualization method lets you use more of the standard world of desktop computing or server computing tools. Uh, but with some of those same benefits of the flash or web style sandbox. Exactly. So you have the ability to think about it as this portable little box, right? As a sip file or whatever kind of metaphor you want to use. This little thing that you can copy, you can send to a friend, you can put it on a server that you can suspend. You can resume later that I think is a very powerful concept. 

Speaker 1 (00:50:51):
Like the idea that I can open a Figma file or a notion document or something, and I can make some changes to it and I can close it, write it, toss it away, evicted from my computer. Right. I clean up my work desk and a week later I go back and it's retains most of it's state. Right. I can pick up where I left off. Like why can't I have that on the lower level? Like in my experience in a computer, why can't that be like below where the windows are? Why is the just taps, right? Why is it not just entire apps or my entire desktop and why? If I had like, you know, four buttons on the side of my screen, right? And each button was like, one of my different, this is not what I'm building by the way. But I think this would be fun to have. 

Speaker 1 (00:51:33):
What if like, yeah, it's button was mapped to one kind of VM in your computer when you pushed about, then it instantly like a millisecond swapped your entire computer to that other one. Then you have four computers at the reach of like a thumb, right? Yeah. So I think there now is a really good time to take this idea for a spin. And this is kind of like the technical approach to play, but what it is is a piece of software. And again, the goal of play that is not to build this piece of software. The goal of playback is to create an encourage, like the development of small scale, personal software. Maybe we can dig into that more a little bit later. So like when I'm building it right now and what I'm trying to get out in the next couple of months is come a Macintosh application and I'm sure I can make a windows app and Lytics up and stuff. 

Speaker 1 (00:52:21):
So Macintosh application, you start it out. And what it does is that it uses the hypervisor of Matt Gomez and it boots up a playbill LS, which is kind of based on the liquids kernel. It takes like two seconds or so to start it. And once it started inside there, you have this feature of Linux called namespaces, which you can use to create these kind of little isolated processes, right? So you can run a program and the program thinks that it's a ha I'm the operating system. I have all the power and it kind of appears us that, and it doesn't have to be bothered about it and stuff like that. And those will be the little products that you will build and you would kind of play around with, they can crash, they can write stuff disc they can mess with the network. None of that is like leaking out to a real computer and not even to like the play that OSTP. 

Speaker 1 (00:53:08):
So to manifestation often on the first attempt to bringing a piece of software that encouraged us as playful thing is, does very resumable, various sort of like kind of stop and go pick it up, leave it off type of software that you can play around with like today, like on your, and the runtime environment that you have is not the web platform, but it's the Linux. So us, so if you want to write things in JavaScript, you can do that, right? If you want to write things and see, you can do that too, if you want to interoperate between these two different things, you can just like write to the file system, right? You can use a database or you can build around an extra database if you want to. Yeah. One of the reasons I was intrigued by playbill is it seems to share this aesthetic. 

Speaker 1 (00:53:52):
I have around kind of collapsing the stack down. So I think it's easiest to explain this in terms of its contrast. I feel like there's this pathology with modern software systems where we keep adding layers and layers and layers. And that does a few things. First of all, it tends to make it slower because you're going through a bunch of calls. It also tends to reduce your ability to do things because in order to have access to a feature as a programmer, that feature needs to thread through all the layers. So if any layer happens to drop or corrupt a feature, you've lost it. This happens a lot with graphics. API is because the original middle layers were designed for bitmaps and then we changed it out to GPU's underneath. But then the middle layers haven't kind of fully caught up. So you get this weird, like impedance mismatch. 

Speaker 1 (00:54:34):
That means you don't have access to the full power of the GPU anyways. And there's also an element of you don't understand what's going on. Cause you're kind of just casting the stone into 19 layers of libraries and you know, who knows what it does. And that to me really interferes with my ability to play because I don't kind of know what's happening. I don't have control over my environment. And I like these platforms, these operating system ideas where you squash that way down, you kind of start from scratch again. Okay. We got namespaces and we got the GPU. What can you do now? Well, it turns out it's a lot. If you have a clean slate like that, I'm curious if that aesthetic sense resonates with what you're trying to do with platelet. Oh, absolutely. It's so fun to you talk about this mark. 

Speaker 1 (00:55:10):
Yeah, I think that this is very, very real and it's something that I care a lot about. I was really early on working in using like no JS and I thought that was a very exciting, and I think what ended up happening with MPM, I think it's still like fantastic. You know, both of it, that's a group of people and culture and all of that stuff, but by making it really easy to pile stuff on top of stuff, people are going to do that path of least resistance. Right. That's why you have like someone who says, oh, look at my web server. That's just 12 lines of code wink, wink. And the wink is like this packaged adjacent file that says dependencies long freaking lists. And each of those have a freaking list of dependencies. And that's quick deterrents from the sandbox thing that we were talking about. 

Speaker 1 (00:55:54):
Like isn't it kind of bunkers that like, we don't dare installing this program on our computer and just run it because you know, it might just go and delete our hard drive. Right. But we're totally fine with just pulling in some like random as like MPM packages, right? One of those Kenya's go on like delete your whole hard drive or upload all of your contacts to some remote server. You will know. Right. It just reminds me of a funny, so I got to mention this. So an acquaintance back in San Francisco has the Ruby gem. I think it's called bundle because there's the gem for the actual package manager for Ruby is called Butler or three verse. It doesn't matter, but he got the corresponding shortened or lengthened named by one character bundle versus Butler. And he very helpfully made the gem, redrafts download the proper package, but there's nothing that would have prevented something like that from just saying, you know, I don't know it was up up your entire hard drive and send it to the cloud. 

Speaker 1 (00:56:44):
And to your point, there's many such cases where we're only one step away from it disaster for sure. And in some way it's good that people are so open with this and just be, you know, forget. I mean, I just want to get some stuff done. And I think that that is one of my drives for wanting to make the change in the first place. I think software today has just become so very complex. And it's also not clear what you would do with the sandboxing. And I think the sandboxing problem is actually a huge open problem. We have pretty good technical solutions for sandboxing at the resource slash hardware virtualization level. It's not perfect, but you can kind of control how much, you know, IO and network and disk space a processes use. But if you think at the application layer, so say for example, you have an application that needs to reach out to a few different domains for network requests. 

Speaker 1 (00:57:30):
How do you enforce a sandbox? It's like reach out to the good domains, but don't send my data to a bad domain. And what if the data gets proxied through a good domain to a bad domain, like this is very hard in practice to control these things. And so we've done a combination of owner's review processes and punting it slash ignoring it. And it's not even clear. That was a better option. I think it's, again, it's an open research question. See, the way I'm thinking about that is from the operator's perspective, the person's perspective, right? So like you're sitting in front of a computer and I want you to be in full control. I want you to be educated about the opportunities and dangerous, right. But I want you to be able to do anything. If you want to like put your computer on fire, you should be able to do that. 

Speaker 1 (00:58:10):
I mean, you pay your harder money for this computer, right. So why would it like, not like to do with it now, if you start with that perspective and you have some idea of grouping, right. You know, a folder inside a folder kind of thing. If you can say that, like the sub folder has these little, the horse in it has this little opening send it right to the outside world. Yeah. Then you're in control of saying this thing can do that thing. Right. And maybe for some people that's gotta be like, you know, I'm just going to do asterisk or I'm just going to do, wildcard is it can do whatever he wants. Right. Is going to go for it. Right. And for some projects, that's what probably you want. And with other things maybe intend to share it with a couple of family members who are not tech savvy. 

Speaker 1 (00:58:51):
Maybe then you want to say this thing should really only be able to connect to load cat.com. Yeah. So I think that there probably like no solution that works in all domains, but if you narrow down your domain, I think that there are some viable solutions. This is the person I'm taking. I can bring up an example of what you can imagine. I've a little drawing in front of me here. As we're kind of recording this, they have sort of played around with. So imagine that you want to make this live program that you collect all of your bookmarks together, right? So you might create a little sandbox called my books, right? And now you create a second sandbox called safari bookmarks scraper in this sandbox is put this program. It's a really simple, like, think of it as it's, rather than a sandbox. This is a program you call it safari bookmarks scraper. 

Speaker 1 (00:59:48):
What it does is he goes to safari like on your host file system, it reads the appeal is filed. It persists that it removes duplicates. And then it just stores those in a local file as local file system. Right? And so in the sandbox, you got to say, this has access to read this file on my host computer, right from the outside. So imagine this little box and you can assume into the box, you run into code for your safari bookmarks scraper and you assume out, and now you look at the box and you can now give it a little connections, right? So you draw a little thread to yourself, every bookmarks file on your computer and say has got access to this. And the next thing you do is you say this kind of exports, or I'm going to Mount this again, this is kind of terminology, but I'm going to Mount this safari bookmarks scraper in my play-based environment. 

Speaker 1 (01:00:41):
And so my global thing as the safari bookmarks scraper, now I do a similar thing. I build a similar thing for Twitter, bookmark scraper, you know, write a little program that goes to Twitter's, that's up a little API thing to put stuff on a disc again, I assume out. And I say, give this access to the Twitter website or API thing mountains at safari bookmarks scraper. So while we have not, right, is these two files, right? One is called Twitter bookmarks. The other one is called safari bookmarks. If a read for me to have these two files, we get this like really nice list of bookmarks, right? And these lists are really created by these programs, right? At this point, we have this, we have made this kind of abstraction, um, that chooses to use the file system. And now we make a third sandbox and we call this my bookmarks, right? 

Speaker 1 (01:01:28):
And this program has got to be real, really simple. This program has opens those two files. It opens the Twitter bookmarks file and it opens the safari bookmarks file. And it just sorts them together. And it draws a simple UI, right? And now this is the one we use to know on a day-to-day basis. We just look at those things and we have a list of all our different bookmarks from all the different places. Right? I think if it takes this kind of nest, that approach where you consume it consume in, and when you assume out you have the ability to say, allow or deny sort of thing, or a map names, that make sense. Right. So when you assume in, there's going to be some names that make sense within that specific domain, right? If you're working on this Twitter bookmark scraper, there's gotta be API key has a specific meaning in that complex, right? 

Speaker 1 (01:02:12):
It's the API key for Twitter, right? It's not the API key for this course or Facebook, right? It's for Twitter. Well, money is Sumo. You don't care about the API key for Twitter right now. You just care about the fact that you have these Twitter bookmarks. That's sort of like the practice of encapsulation in programming, but for personal data instead of yeah. Well, another way to think of it is the two big kind of abstractions we have for managing the system resources and all the things that are on your computer, including programs you want to run and storage, you want to access is classic desktop, Mac, windows, Linux. Those that came before, which is essentially just totally open access to any program you ever run. There's the root user concept, but that's basically irrelevant because it's just some system things that don't personally matter to me. 

Speaker 1 (01:03:02):
And then everything else has total access to everything. And then you have the mobile sandboxing environments, which is a very strict sandboxing per app. Each little tile on your home screen comes with its own storage, but except for some extremely limited things, it can't really reach outside of that very easily. And so this seems like sort of a third model that gets some of the benefits of that sandboxing, but also gets you some of the benefits of the desktop ability moldability programming environment, play space. Yeah. Hopefully we'll see. It's still a work in progress Erasmus earlier. You mentioned sandboxing in the context of a play space where I could feel comfortable just doing stuff. And I don't need to worry about messing up the other programs. And within that space, I can write a little program and it can just do whatever. And then we were also talking a bit about things like the node ecosystem or that sort of thing. 

Speaker 1 (01:03:58):
And there you're running software or libraries written by other people in that context, sandboxing have this security, you protect you from bad actors sort of context. But it seems to me that the goal of sandbox gets you're talking about it within the context of the playbill vision is really about this personal software and about writing things for yourself rather than something that's big scale for. I don't know, tens of thousands or millions of other people. Yeah. I think that's right. And no matter how you turn and twist on it, like what we're talking about is like trust, right. And safety, but it's trust and safety for very different purposes. Right? And from, and two very different types of actors, like if you're building software like very large scale and you do that in such a way that you enable people to essentially run their own arbitrary, like programs in your thing. 

Speaker 1 (01:04:51):
Right? So when we worked the thing about, for instance, we built this plugin feature where people can write some plugins that we just do things right. And it would be shared without a people. So we were like, well, we can just make this just run straight into app. Right. If someone writes a bad for a loop, like Figma will crash for everyone who visits this found right around supply chain. So that type of sandboxing and that type of trust and security, I think that's lack of trust. You're like we cannot trust the things coming in. And it's a lot about safety and security. It's like, we're going to assume that the things coming in, because we don't trust it are bad. Right. So to sandboxing here is really the safety net to make sure that outside is not going to be effective. Whereas the type of sandbox that we've been talking about mostly today is that they create a safety for yourself, like an emotional safety for you. 

Speaker 1 (01:05:41):
Right. But like, well, I know I'm going to screw up. Right. I trust myself, but I also know that I screw up sometimes. Right. So when you look at it that way, it is indeed very different, I think. And I think this, you know, smaller scale software is also great interest to me, there's sort of the end user programming angle, that writing stuff for yourself, but even writing for a few people, friends and family, or just a really niche piece of software, I think baked into the assumption about almost all software development is big scale. And in fact, it's almost when people talk about the economics of software, it's at the cost of developing it. You can assume a zero because that's true when you get to enough users and customers, if you have many millions or tens of millions or hundreds of millions of customers, the upfront developer time, which is relatively fixed, you can think of is approaching zero. 

Speaker 1 (01:06:34):
But that's quite different when you're talking about five users because it's everyone in your family or one user, because it's just you or a hundred users because it's everyone in your company. And I'm really interested in anything that kind of takes us in this direction of as Robin Sloan writes in his article, that I'll link in the show notes, which is the idea of apps as a home cooked meal, allowed them seeing a difference between the kind of large-scale food production versus just making something at home for yourself or for a small circle. Yeah. I think that is a really insightful and fun article, an idea that Robin's writing about. And he actually touches a little bit on this, which is that writing software today, like houses really steep cliff, right? Meaning that you have to make all these different choices. If you're going to make something today, if you let's say that you want to make this fun little thing over a Sunday, you have in a couple of hours. 

Speaker 1 (01:07:29):
Right. And I think that today, most people who don't do this regularly, and I think that the people who do it regularly will like stop doing it for these reasons is that it will be like, okay, you kind of stretch your knuckles a little bit. You'll be like nice cup of tea or coffee. And you're going to make this thing that I got seven hours. So you start out and you're going to be like, okay, should I make this like a web thing? Or should I like make this a Coco app? Or, you know, um, a window setup or whatever, you sort of like, you do a little research and taking a little while. And you're like, well, maybe I should make this as like a web app. And then you're like, okay, should I write this in, you know, Java script? Or should I maybe like write this in like this rough thing to web assembly? 

Speaker 1 (01:08:09):
Should I use like this TypeScript thing? Okay. Which like, bundlers should I use roll up or this thing, which plugins that I use, how to make these MFS work, you know, like before, you know, it, you've spent hours just making these choices, that actually are not part of the essence of what your Sunday project is about. Right. And then you gotta be like, well, which of these hundred different databases or ways to store data and I gonna use, and they all have very compelling kind of marketing, like idea and like things like when you read about these things, you're like, wow, every single project has these Berlin people behind them. Right? Every single project like has good reasons to exist. Right. And this does not make it easier. It just makes it harder to make a choice. And I think what happens is that you end up spending, most of you Sunday, you just like poking at different technologies. 

Speaker 1 (01:09:00):
You use read about all these different things and you gain knowledge about like, oh, I now know that there's CAPA script, JavaScript, TypeScript. I like X script Y script and so on. Right. And I know that there are these different databases and my SQL is called Maria DB these days and stuff like that. But you didn't make your thing. Right? If you want to learn about those things, maybe you would have gone about it in a different way. And I think there was a point in time when the choices were a lot fewer, right? I'm not saying that's a better, it feels different. But for this scenario, it's better. Like you just end up making much fewer choices you get started earlier. I've noticed that in many learn programming type things, short-term boot camps or online resources, they often end up telling you to use. 

Speaker 1 (01:09:45):
What's basically just a command line program written in something like Python or Ruby and your interface is read and write. So you can type stuff in on the keyboard and you print stuff out to a text console. That's essentially identical to what I learned when I was doing programming 30 years ago. And maybe you've got some more sophisticated ways to execute that like rebel it or something like that, that lets you run essentially this Python kind of CLI type thing in your browser. But I think it's for precisely that reason that all those choices and options and infrastructure that probably do make sense for large scale software, just make no sense for someone who wants to just quickly learn what is this programming thing and how can I get to a satisfying result of writing my own program that does something interesting. Yeah. Just kind of recapitulate. 

Speaker 1 (01:10:35):
I think there's several things that conspire against the informal novice personal programmer. There's all the choices. There's the complexity of the platforms. And increasingly there's the kind of forced hurdle as a platform, especially on mobile, where if you want to build an iOS app, for example, I think you need like a developer account and you got to get basically permission from apple to run this stuff on your own devices and you got to use their language and their SDK and everything. And this also relates to the idea of ideally having a gradual ramp. So I think the Unix ecosystem for all its challenges is actually a really good example of this. So you can start by just having a series of commands that you kind of remember and you string together on the command line to do whatever, you know, cat, pipe filter, you know, whatever you're trying to do. 

Speaker 1 (01:11:17):
And then you can nail that as a little script that you save and give an executable bit too. And then you can eventually, perhaps it becomes more sophisticated and you rewrite it and Ruby, and then later you want it to be fast. So you write in C and later it becomes a bigger DLC. You wanna put it in the package manager and eventually gets promoted to the OSTP and trying to in the standard, right? And those are all on the same path. And there's a, there's a clear step from one to the other. Whereas in a lot of our systems, either there's a huge jump to get started, or you hit a wall at some point and you have to kind of change the way you're doing it. So there's no gradual ramp. And I think that's important, not only because of the accessibility element of perhaps you want to just get started programming or you want to do some personal programming, but also because again, this intellectual humility element of it, can't be the case that all of the good software ideas come from the programmer priest class, right. 

Speaker 1 (01:12:01):
You know, the people who know all the incantations for setting up web pack or whatever it needs to be the case that you can write a mod and it eventually becomes a huge game and the equivalent for other domains with the video games. I think those ramp you're talking about is pretty crucial to the experience, the user experience, right? If a game is incredibly hard on the first level, you're just going to give up. Right. And it's not going to be fun. If a game is like super easy, right. Then similarly is going to be in a place where like, why am I doing this? Right. Like the perfect sort of like game has this like flight of stairs where level one, you take a small step up the first flight of the first there. Right. And you kind of feel, Ooh, I took a step. 

Speaker 1 (01:12:38):
Right. And you know, there's, there's so much art and magic to like making a game that works small. Right. But like, ideally you would take these small, small steps over and over and some steps out a little higher, right. And some steps are a little lower, but the experience you have there. And I think this kind of like compliments to where you're talking about mark, which is, you were saying, you pipe some stuff together, you put it in a shell script, right. You make a Ruby file to make a C program. You make a real UI and so on. That is kind of utility. And that's the ability to grow. And I think to compliment that there's also this user experience that is important of like feeling that you're making progress as you're building things. Right. Because a big reason for why a lot of us are making these things is because we enjoy it. 

Speaker 1 (01:13:20):
And I don't know about you, but I had only enjoy spending three hours picking like a Java's get bumbler. They can do the things I want and trying to like choose one of the 184 different services that AWS alone provides right now, Google cloud has so similar number. Right? Yeah. And this also reminds me, and it's one of the reasons why I'm so excited about a project like yours. And I think they're so important. Suppose we want to have new and different and better computing platforms. Well, the reality is that if you want to build them outright, it's going to cost, I don't know, at least a hundred million dollars and probably a billion plus, like just to get all of the engineer years, you need to actually build everything up from scratch it's as an empirical matter, it's just a huge investment. And unless you're one of a small handful of companies, you can't do that outright. 

Speaker 1 (01:14:04):
So you need a trick. And I think the trick is making the programming game, you know, making the programmers actually want to build up the pieces around platform over time. So you start with something that's like a raspberry PI or a play bit. It seems like a toy. It seems like something you just play with. And perhaps over time you can build up more pieces and get a new computing platform. That's my hope that someday we're able to get there. Yeah. I love that. It's sort of like dream. I think it's called for PlayStation four where you kind of build these things. You shared them with a shutter. The web is very much like that. Right. People kind of like building things and remixing stuff. There's an article of this kind of old is titled the cathedral and the Bazaar by this guy called Eric Raymond classic. 

Speaker 1 (01:14:44):
And it's kind of like a long piece, but I'm sure Adam, you can add it into notes, linked link to, but it kind of like reflects a little bit how the Linux project took this very unique approach to software development where you have essentially, this guy in a bathrobe is sort of like coordinating some emails here and there. And then you have like a thousand people around the world. You're building stuff. And this is the bizarre metaphor you have this battling bizarre, obvious, like all these different little vendors, right? All these different ideas, all this little like things, people are billing for the Linux kernel. And somehow you look at this and you're like, this is Napa gonna work. Right. This is total chaos. The quality has got to be. Like it's gotta be in cohesive. The cathedral model is much better, which is to kind of the monolith, the team with the leader and the sprints and all of that stuff. 

Speaker 1 (01:15:34):
Right. But somehow Linux is like by far, far, far, right? The most high called them a stable operating system in terms of global use, right. It is easily the most deployed OS, right? Like every Android phone, every server pretty much is the next. So I think it's interesting when you think about like, if you can create a culture that is like a Bazaar, that is a Bosar, but like a theme, you know, like people, the vendors send those bizarre to people who go there to shop around to explore things. They're, they're under this kind of shared umbrella of like, you know, we're gonna make software free shutter, you know, again, to make this little program for me and my family, right. Or like Robin hood, or I just want to automate this thing that I do all the time. I'm going to make my own little note taking app, right? 

Speaker 1 (01:16:21):
Like this is the sort of play the Bazaar that I hope can exist one day, you know? Well, we've been going awhile before we wrap it up. I thought it'd be fun to hear from each of you. What is an example of software that exists today or that you've used in the past that you find playful or exemplifying this spirit of play for me? I think there's a lot. This is tough to name one, but Macromedia director or it's called, gosh, I forget now it was called something else before it was acquired by my Commedia. But my committee director, I'm going to call it a bad mom. To me, that was just this incredible software that offered me to build something that felt real. It had a very narrow set of constraints. You had to write it in this like actually pretty bad programming language called, but it had all these primitives and stuff for like making thing to felt like real desktop apps. 

Speaker 1 (01:17:14):
And it didn't in a pretty approachable way at the time. And so for me and Macromedia director, like it was a very interesting blend between utility and playfulness. That also really inspired me. Nice one. Yeah. For me, I was recently thinking about some of my youthful time of computers and I'm kind of an eighties, nineties kid, and there's lots of cool stuff going on then with the demo scene and BBS culture and that sort of thing. But I spent a good bit of time in these mud trackers, which are basically once computers could play back samples and could play multiple samples at a time, you could finally do something that resembled sort of real-time music creation, but it was still very limited, but these things were kind of divided into 16 sections and kind of like a drum machine a little bit, but a little more created this particular aesthetic of music, which also probably connected also to the aesthetic of that time. 

Speaker 1 (01:18:13):
Yeah. Again like demo scene and DBS world, but I spent far too much time playing with those. And on one hand, yeah, you say it's a tool for creating something, but on the other hand it had a not very serious sense to it because it was this specific computer scene. Our no one thought you were going to be composing an orchestral piece that people took, let's say seriously. It was clearly for fun. When I lived this stock on mobilities clubs that had all these nerds like myself perform these kinds of mod music, usually on like a modified game boy. And it would go on stage and it would make some little like cool, like in, air-quotes got a demo thing and it would kind of play on the game by, you know, this kind of like mud like bit like music and yeah, you're totally right. 

Speaker 1 (01:18:58):
I think like, no one there thought that was going to be like, you know, the next Madonna or shell there's going to be, you know, whatever. Yeah. It was just like out of pure fun. Yeah. And for me I'm a huge fan of the raspberry PI project. I actually kind of surprised myself. I got one, cause basically everyone else was getting them and like, mark, you should get one of these. I'm like, okay. And you know, they're cheap. So they're accessible and expect you to be the type to bend a peer pressure. Mark. Yeah. Yeah. I got it. And it, the amount of kind of Polish and accessibility was so impressive, you know, just having this physical device that you can just start plugging stuff into. And it does things in the real world that sounds so simple. But in all other computing platforms, that's become so harder. 

Speaker 1 (01:19:37):
And indeed in many cases, impossible. And having this device that you have full control over, you can do whatever you want. You can reformat it. You can plug in all these wild peripherals that was very accessible yet empowering. And it gave me a glimpse of what I think if you play it out a half dozen steps, that type of platform could become, I want to share this by the way I was playing around with these flipped out this place. Oh yeah. Yeah. I've seen these. So there's a couple of Swedish friends of mine. They have the small company called engineering that is really cool, like audio equipment and stuff. And there's some kind of contracting work too. They did this like really huge display with these. They built together hundreds of these into a massive display at a hotel in Stockholm. And I got a couple of these things that I hook it up to a pie nice. And a real little, I had to reverse engineer protocol. So I bought these from the company. It's like a Polish company called alpha Seto. And the protocol was like really simple, but it's kind of like Sarah port thing, but this is really fun. And I listened to what you just say, mark, about how like physical it is like the flipped up display it's like in all senses, power red, bold compared to anything else it's loud. It's expensive. It's low arrests. Blah-blah-blah loud is a feature though. That flippy sound it's all about that. 

Speaker 1 (01:20:55):
Yeah. It was my experience with raspberry PI was similar. Even the hello world, which is essentially just plugging in an led and getting it to light up. Why is it that getting an led, you plugged in yourself to light up. It's more satisfying than for example, lighting up a pixel on a screen. I don't know, perhaps it's that we spend so much time in the virtual environments that being somehow out in the physical environment, but then being able to access that through the power of computing and programming, something quite magical to that. Well, let's wrap it there. Thanks everyone for listening. You have feedback. Write us on Twitter and muse app HQ. Or if I email hello@museapp.com, you can help us out by leaving a review on apple podcasts. And I'm really looking forward to playing with playmate. Thanks for coming on Rasmus. [inaudible].

